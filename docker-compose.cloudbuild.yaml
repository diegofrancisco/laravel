version: '3'

#rede na qual os containers abaixo irão operar (permite a comunicação entre os mesmos)
networks:
    app-network:
            driver: bridge

#Define os serviços que irão ser criados (cada um dos serviços abaixo irá gerar um container próprio a partir das configurações definidas abaixo para cada um deles)
services:

    app:
        #nesse exemplo assuma um docker file semelhante ao do código acima, configurando o Laravel
        build: . 
        container_name: app
        # entrypoint: dockerize -template ./.docker/app/.env:.env -wait tcp://db:3306 -timeout 40s ./.docker/entrypoint.sh
        # environment:
        #     - DB_HOST=db
        #     - DB_DATABASE=laravel
        #     - DB_USERNAME=root
        #     - DB_PASSWORD=root
        volumes:
            - .:/var/www/
        networks:
            - app-network
        depends_on: #só sobe esse serviço no comando de compose depois que o serviço de db estiver de pé
            - db
    nginx:
        #docker file básico usando a última versão do nginx 
        build: .docker/nginx
        container_name: nginx
        entrypoint: dockerize -template ./.docker/nginx/app/nginx.conf:./.docker/nginx/nginx.conf /docker-entrypoint.sh nginx -g 'daemon off;'
        environment:
            - NGINX_HOST=app
            - NGINX_PORT=9000
        restart: always #caso o container caia, permite reinicia-lo?
        tty: true #permite iteração com o container rodando. ex: abrir o bash iterativo no container
        ports:
            - 8000:80
        volumes:
            - .:/var/www/
        networks:
            - app-network
    db:
        image: mysql:5.7
        command: --innodb-use-native-aio=0
        container_name: db
        tty: true
        restart: always
        ports:
            - 3306:3306
        # volumes:
        #     - ./.docker/dbdata:/var/lib/mysql #passo essencial para que as tabelas criadas pelo laravel não se percam sempre que o container morrer
        # #Na imagem do MySql existem váriaveis de ambiente já criadas, que podem ser utilizadas para de uma maneira simples já configurar os dados de um banco de dados inicial
        environment:
            - MYSQL_DATABASE=laravel
            - MYSQL_USER=root
            - MYSQL_ROOT_PASSWORD=root
        networks:
            - app-network

    redis:
        image: redis:alpine
        expose:
            - 6379
        networks:
            - app-network
        